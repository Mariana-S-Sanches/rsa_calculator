// ignore_for_file: prefer_const_constructors

import 'package:flutter/material.dart';

class RSADocumentation extends StatefulWidget {
  @override
  _RSADocumentationState createState() => _RSADocumentationState();
}

class _RSADocumentationState extends State<RSADocumentation> {
  bool card1 = false;
  bool card2 = false;
  bool card3 = false;
  bool card4 = false;
  EdgeInsets paddingText = EdgeInsets.only(top: 10, bottom: 20, left: 30, right: 30);

  textPresset({required String text}) {
    return Text(
      text,
      textScaleFactor: 1.1,
      textAlign: TextAlign.center,
      style: TextStyle(
        color: Colors.brown[700],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.brown[500],
        title: Text('Criptografia RSA'),
        centerTitle: true,
      ),
      body: ListView(
        shrinkWrap: true,
        controller: ScrollController(),
        physics: ClampingScrollPhysics(),
        padding: EdgeInsets.all(30),
        children: [
          Padding(
            padding: paddingText,
            child: Text(
              'Sendo mundialmente conhecida por sua seguran√ßa e baseada em princ√≠pios matem√°ticos, a Criptografia RSA √© um cripto-sistema muito usado na transmiss√£o de dados.',
              textScaleFactor: 1.1,
              textAlign: TextAlign.center,
              style: TextStyle(
                color: Colors.brown[700],
              ),
            ),
          ),
          Padding(
            padding: paddingText,
            child: Text(
              'Criada em 1977, por  Ron Rivest, Adi Shamir e Leonard Adleman, RSA √© um cripto-sistema de Chave P√∫blica, ou mais conhecido como Chave Assim√©trica, e se consiste em quatro etapas:',
              textScaleFactor: 1.1,
              textAlign: TextAlign.center,
              style: TextStyle(
                color: Colors.brown[700],
              ),
            ),
          ),
          expansionCardKeyGeneration(),
          expansionCardKeyDistribuition(),
          expansionCardEncript(),
          expansionCardDecript(),
        ],
      ),
    );
  }

  expansionCardKeyGeneration() {
    EdgeInsets pdd = EdgeInsets.only(top: 0, bottom: 20, left: 30, right: 30);

    return Padding(
      padding: EdgeInsets.only(bottom: 20, top: 20),
      child: ExpansionPanelList(
        expansionCallback: (int i, bool expanded) {
          setState(() {
            card1 = !expanded;
          });
        },
        animationDuration: Duration(milliseconds: 800),
        children: [
          ExpansionPanel(
            canTapOnHeader: true,
            body: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: <Widget>[
                Padding(
                  padding: pdd,
                  child: textPresset(
                    text: 'As chaves para encripta√ß√£o do RSA se consistem em 5: duas p√∫blicas e tr√™s privadas, onde:',
                  ),
                ),
                Padding(
                  padding: pdd,
                  child: textPresset(
                    text:
                        '√â necess√°rio que existam dois n√∫meros primos, denominados Chave Privada P e Chave Privada Q, para o encontro das pr√≥ximas chaves. Estes dois se tornam nossas primeiras chaves privadas, e, por isso, n√£o devem ser compartilhados com ningu√©m.',
                  ),
                ),
                Padding(
                  padding: pdd,
                  child: textPresset(
                    text: 'Em seguida fazemos o c√°lculo da primeira chave p√∫blica, que denominamos como Chave P√∫blica N, que nada mais √© do que o produto das duas chaves privadas. ',
                  ),
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Padding(
                      padding: pdd,
                      child: Image.asset(
                        'assets/pq_prime.png',
                        width: 100,
                      ),
                    ),
                  ],
                ),
                Padding(
                  padding: pdd,
                  child: textPresset(
                    text: 'Tendo encontrado a chave N, agora devemos calcular a fun√ß√£o Totiente da chave N, que se consiste basicamente em:',
                  ),
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Padding(
                      padding: pdd,
                      child: Image.asset(
                        'assets/form_totiete.png',
                        width: 180,
                      ),
                    ),
                  ],
                ),
                Padding(
                  padding: pdd,
                  child: textPresset(
                    text:
                        'A partir do resultado obtido de ùúë(N), devemos escolher um n√∫mero que seja maior que 1, que n√£o possua divisores comuns al√©m do 1, e que seja menor que o n√∫mero encontrado anteiormente. Esse n√∫mero ser√° a chave p√∫blica E.',
                  ),
                ),
                Padding(
                  padding: pdd,
                  child: textPresset(
                    text:
                        'A seguir, para encontrar o valor da Chave Privada D, devemos fazer um c√°culo comumente chamado de inverso modular. Este se baseia em encontrar um n√∫mero que, ao ser multiplicado pela chave p√∫blica E, apresente resto 1, ao ser dividido pela ùúë(N).',
                  ),
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Padding(
                      padding: pdd,
                      child: Image.asset(
                        'assets/dxe.png',
                        width: 180,
                      ),
                    ),
                  ],
                ),
                Padding(
                  padding: pdd,
                  child: textPresset(
                    text: '√â somente ap√≥s o encontro desses 5 valores que a encripta√ß√£o pode acontecer.',
                  ),
                ),
              ],
            ),
            headerBuilder: (BuildContext context, bool isExpanded) {
              return Padding(
                padding: EdgeInsets.all(10),
                child: Text(
                  'Gera√ß√£o de Chaves',
                  textScaleFactor: 1.5,
                  style: TextStyle(
                    color: Colors.brown[700],
                  ),
                ),
              );
            },
            isExpanded: card1,
          ),
        ],
      ),
    );
  }

  expansionCardKeyDistribuition() {
    EdgeInsets pdd = EdgeInsets.only(top: 0, bottom: 20, left: 30, right: 30);
    return Padding(
      padding: EdgeInsets.only(bottom: 20, top: 20),
      child: ExpansionPanelList(
        expansionCallback: (int i, bool expanded) {
          setState(() {
            card2 = !expanded;
          });
        },
        animationDuration: Duration(milliseconds: 800),
        children: [
          ExpansionPanel(
            canTapOnHeader: true,
            body: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: <Widget>[
                Padding(
                  padding: pdd,
                  child: textPresset(
                    text:
                        'Suponha que uma parte A, queira enviar dados √† uma parte B. Para isso, a parte B deve saber a chave p√∫blica de A e A deve usar a chave privada para descriptografar a mensagem.',
                  ),
                ),
                Padding(
                  padding: pdd,
                  child: textPresset(
                    text: 'Para que B consiga enviar mensagens para A, este deve fornecer as chaves p√∫blicas N e E, e em hip√≥tese alguma a chave D da parte A deve ser revelada.',
                  ),
                ),
              ],
            ),
            headerBuilder: (BuildContext context, bool isExpanded) {
              return Padding(
                padding: EdgeInsets.all(10),
                child: Text(
                  'Distribui√ß√£o de Chaves',
                  textScaleFactor: 1.5,
                  style: TextStyle(
                    color: Colors.brown[700],
                  ),
                ),
              );
            },
            isExpanded: card2,
          ),
        ],
      ),
    );
  }

  expansionCardEncript() {
    EdgeInsets pdd = EdgeInsets.only(top: 0, bottom: 20, left: 30, right: 30);
    return Padding(
      padding: EdgeInsets.only(bottom: 20, top: 20),
      child: ExpansionPanelList(
        expansionCallback: (int i, bool expanded) {
          setState(() {
            card3 = !expanded;
          });
        },
        animationDuration: Duration(milliseconds: 800),
        children: [
          ExpansionPanel(
            body: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: <Widget>[
                Padding(
                  padding: pdd,
                  child: textPresset(
                    text: 'A fase de encripta√ß√£o do texto se consiste em transformar a mensagem em ASCII, baseado no c√≥digo de cada caractere na tabela. Codificaremos a palavra "Cripto".',
                  ),
                ),
                Padding(
                  padding: pdd,
                  child: textPresset(
                    text: 'Neste exemplo nossas chaves ser√£o:',
                  ),
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Padding(
                      padding: pdd,
                      child: textPresset(
                        text: 'Chave P = 13',
                      ),
                    ),
                  ],
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Padding(
                      padding: pdd,
                      child: textPresset(
                        text: 'Chave Q = 11',
                      ),
                    ),
                  ],
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Padding(
                      padding: pdd,
                      child: textPresset(
                        text: 'Chave D = 107',
                      ),
                    ),
                  ],
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Padding(
                      padding: pdd,
                      child: textPresset(
                        text: 'Chave N = 143',
                      ),
                    ),
                  ],
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Padding(
                      padding: pdd,
                      child: textPresset(
                        text: 'Chave E = 83',
                      ),
                    ),
                  ],
                ),
                Padding(
                  padding: pdd,
                  child: textPresset(
                    text:
                        'Quando essa palavra √© convertida em c√≥digo ASCII, recebemos a seguinte cadeia de n√∫meros: 67, 114, 105, 112, 116, 111. Cada n√∫mero corresponde √† letra da mensagem, e ser√° tratado como bloco M.',
                  ),
                ),
                Padding(
                  padding: pdd,
                  child: textPresset(
                    text: 'Agora devemos pegar um bloco M e para encriptar a mensagem, vamos come√ßar com 67. ',
                  ),
                ),
                Padding(
                  padding: pdd,
                  child: textPresset(
                    text: 'Denominaremos como C o bloco codificado que obteremos ap√≥s aplicar a f√≥rmula: ',
                  ),
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Padding(
                      padding: pdd,
                      child: Image.asset(
                        'assets/equation_two.png',
                        width: 180,
                      ),
                    ),
                  ],
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Padding(
                      padding: pdd,
                      child: Image.asset(
                        'assets/equation_one.png',
                        width: 180,
                      ),
                    ),
                  ],
                ),
                Padding(
                  padding: pdd,
                  child: textPresset(
                    text: 'Ap√≥s esse c√°lculo, obteremos como resultado o valor 111. Seguindo essa mesma f√≥rmula em todos os blocos, receberemos a mensagem: 111, 108, 40, 96, 51, 67',
                  ),
                ),
              ],
            ),
            headerBuilder: (BuildContext context, bool isExpanded) {
              return Padding(
                padding: EdgeInsets.all(10),
                child: Text(
                  'Encripta√ß√£o',
                  textScaleFactor: 1.5,
                  style: TextStyle(
                    color: Colors.brown[700],
                  ),
                ),
              );
            },
            canTapOnHeader: true,
            isExpanded: card3,
          ),
        ],
      ),
    );
  }

  expansionCardDecript() {
    EdgeInsets pdd = EdgeInsets.only(top: 0, bottom: 20, left: 30, right: 30);
    return Padding(
      padding: EdgeInsets.only(bottom: 20, top: 20),
      child: ExpansionPanelList(
        expansionCallback: (int i, bool expanded) {
          setState(() {
            card4 = !expanded;
          });
        },
        animationDuration: Duration(milliseconds: 800),
        children: [
          ExpansionPanel(
            body: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: <Widget>[
                Padding(
                  padding: pdd,
                  child: textPresset(
                    text:
                        'A fase de decripta√ß√£o da mensagem se consiste em realizar o caminho inverso da encripta√ß√£o. Aqui, devemos pegar cada bloco codificado na fase de encripta√ß√£o( 111, 108, 40, 96, 51, 67), e aplicar a mesma f√≥rmula em cada.',
                  ),
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Padding(
                      padding: pdd,
                      child: Image.asset(
                        'assets/equation_tree.png',
                        width: 150,
                      ),
                    ),
                  ],
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Padding(
                      padding: pdd,
                      child: Image.asset(
                        'assets/equation_four.png',
                        width: 180,
                      ),
                    ),
                  ],
                ),
                Padding(
                  padding: pdd,
                  child: textPresset(
                    text:
                        'Ap√≥s este processo, nosso primeiro bloco descriptografado resultar√° em 67, sendo este o c√≥digo ASCII apresentado anteriormente, e fazendo o mesmo processo nos outros blocos, receberemos: 67, 114, 105, 112, 116, 111.',
                  ),
                ),
                Padding(
                  padding: pdd,
                  child: textPresset(
                    text: 'Verificando a tabela ASCII, e assimilando cada bloco a seu devido c√≥digo receberemos a mensagem "Cripto" de volta.',
                  ),
                ),
              ],
            ),
            headerBuilder: (BuildContext context, bool isExpanded) {
              return Padding(
                padding: EdgeInsets.all(10),
                child: Text(
                  'Decripta√ß√£o',
                  textScaleFactor: 1.5,
                  style: TextStyle(
                    color: Colors.brown[700],
                  ),
                ),
              );
            },
            canTapOnHeader: true,
            isExpanded: card4,
          ),
        ],
      ),
    );
  }
}
